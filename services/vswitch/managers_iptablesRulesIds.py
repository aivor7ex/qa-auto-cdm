"""
Auto-generated by 'QA-Tools'
The test suite for the vswitch service's /managers/iptablesRulesIds endpoint.

This suite is designed to validate the response from the /managers/iptablesRulesIds
endpoint, which returns a simple JSON list of strings. The tests validate this
structure and ensure the endpoint remains stable when queried with unexpected parameters.
"""

import pytest
import json

# =====================================================================================================================
# Constants
# =====================================================================================================================

ENDPOINT = "/managers/iptablesRulesIds"
RESPONSE_SCHEMA = list  # The response must be a list of strings

# =====================================================================================================================
# Fixtures
# =====================================================================================================================

@pytest.fixture(scope="module")
def response(api_client):
    """Provides the response from the endpoint."""
    return api_client.get(ENDPOINT)

@pytest.fixture(scope="module")
def response_data(response):
    """Validates and returns the JSON response data."""
    assert response.status_code == 200, f"Expected 200 OK, got {response.status_code}"
    data = response.json()
    assert isinstance(data, list), "Response should be a JSON list"
    for item in data:
        assert isinstance(item, str), f"All items must be strings, got {type(item)}"
    return data

# =====================================================================================================================
# Test Cases
# =====================================================================================================================

def test_status_code_200(response):
    assert response.status_code == 200

def test_response_schema(response_data):
    assert isinstance(response_data, list)
    for item in response_data:
        assert isinstance(item, str)

def _format_curl_command(api_client, endpoint, params=None, headers=None):
    base_url = getattr(api_client, "base_url", getattr(api_client, 'base_url', 'http://127.0.0.1'))
    full_url = f"{base_url.rstrip('/')}/{endpoint.lstrip('/')}"
    if params:
        param_str = "&".join([f"{k}={v}" for k, v in params.items() if v is not None])
        if param_str:
            full_url += f"?{param_str}"
    headers = headers or getattr(api_client, 'headers', {})
    headers_str = " \\\n  ".join([f"-H '{k}: {v}'" for k, v in headers.items()])
    curl_command = f"curl -X GET '{full_url}'"
    if headers_str:
        curl_command += f" \\\n  {headers_str}"
    return curl_command

# 35+ meaningful parameterized scenarios for GET
PARAMS = [
    ("empty", ""),
    ("long", "a" * 500),
    ("special", "!@#$%^&*()_+-=[]{}|;':,./<>?"),
    ("unicode", "你好, Здравствуйте"),
    ("sql_injection", "' OR 1=1; --"),
    ("xss", "<script>alert('XSS')</script>"),
    ("path_traversal", "../../../etc/passwd"),
    ("numeric_str", "12345"),
    ("bool_str_true", "true"),
    ("bool_str_false", "false"),
    ("null_str", "null"),
    ("none_val", None),
    ("list[]", "a"),
    ("dict[key]", "value"),
    ("int", 100),
    ("float", 99.99),
    ("negative", -1),
    ("zero", 0),
    ("large_int", 999999999999999999),
    ("version_string", "v1.2.3-beta"),
    ("email", "test@example.com"),
    ("uuid", "123e4567-e89b-12d3-a456-426614174000"),
    ("date_str", "2025-06-27"),
    ("mac_addr", "00:1B:44:11:3A:B7"),
    ("hostname", "my-test-server.local"),
    ("semver", "2.1.0-alpha.1"),
    ("url", "https://example.com/api/v2/test"),
    ("html_encoded", "a%20b%26c"),
    ("empty_json", "{}"),
    ("filter", "all"),
    ("id", 123),
    ("verbose", True),
    ("output", "json"),
    ("random1", "foo"),
    ("random2", "bar"),
    ("random3", "baz"),
]

@pytest.mark.parametrize("param,value", PARAMS)
def test_ignores_params(api_client, response_data, param, value):
    params = {param: value} if value is not None else {param: ""}
    resp = api_client.get(ENDPOINT, params=params)
    assert resp.status_code == 200
    data = resp.json()
    assert isinstance(data, list)
    for item in data:
        assert isinstance(item, str)
    assert data == response_data 