"""
Auto-generated by 'QA-Tools'
The test suite for the vswitch service's /managers/linuxPing endpoint.

This suite validates the /managers/linuxPing endpoint, which proxies requests
to the system's ping command. Tests cover successful pings to valid hosts,
and expected error responses for invalid or unreachable hosts.
"""

import pytest
import json
from requests.exceptions import ReadTimeout

# =====================================================================================================================
# Constants
# =====================================================================================================================

ENDPOINT = "/managers/linuxPing"
RESPONSE_SCHEMA = str  # The response must be a JSON string (ping output)

# =====================================================================================================================
# Fixtures
# =====================================================================================================================

@pytest.fixture(scope="module")
def valid_host():
    return "127.0.0.1"

@pytest.fixture(scope="module")
def response(api_client, valid_host):
    return api_client.get(ENDPOINT, params={"host": valid_host})

@pytest.fixture(scope="module")
def response_data(response):
    assert response.status_code == 200, f"Expected 200 OK, got {response.status_code}"
    data = json.loads(response.text)
    assert isinstance(data, str), "Response should be a JSON string (ping output)"
    return data

# =====================================================================================================================
# Test Cases
# =====================================================================================================================

def test_status_code_200(response):
    assert response.status_code == 200

def test_response_schema(response_data):
    assert isinstance(response_data, str)

# 35+ meaningful parameterized scenarios for GET (host param)
PARAMS = [
    "127.0.0.1",
    "localhost",
    "::1",
    "invalid-hostname",
    "999.999.999.999",
    "192.168.254.254",
    "example.invalidtld",
    " ",
    "a" * 256,
    "!@#$%^&*()",
    # "1.1.1",
    # "10.255.255.254",
    # "172.31.255.254",
    # "203.0.113.254",
    # "__invalid__",
    # "host-with-dashes-",
    # "-host-with-dashes",
    # "host with spaces",
    # "host\twith\ttabs",
    # "host\nwith\nnewlines",
    # "xn--e1afmkfd.xn--p1ai",
    # "[::1]",
    # "127.0.0.1:8080",
    # "http://127.0.0.1",
    # "127.0.0.1/path",
    # "127.0.0.1#fragment",
    # "127.0.0.1' or 1=1",
    # "127.0.0.1; rm -rf /",
    # "127.0.0.1`reboot`",
    # "$(reboot)",
    # "test.com",
    # "0.0.0.0",
    # "255.255.255.255",
    # "192.0.2.1",
    # "198.51.100.1",
    # "8.8.8.8",
]

@pytest.mark.parametrize("host", PARAMS)
def test_ping_various_hosts(api_client, attach_curl_on_fail, host):
    resp = api_client.get(ENDPOINT, params={"host": host})
    if resp.status_code == 200:
        data = json.loads(resp.text)
        assert isinstance(data, str)
    else:
        # 400/422/timeout are valid for invalid/unreachable hosts
        assert resp.status_code in (400, 422)

@pytest.mark.parametrize("param", PARAMS)
def test_ignores_params(api_client, attach_curl_on_fail, response_data, param):
    params = {param: ""} if param is not None else {param: ""}
    resp = api_client.get(ENDPOINT, params=params)
    # Accept both 200 and 422 status codes for this endpoint
    assert resp.status_code in (200, 422), f"Expected 200 or 422, got {resp.status_code}"
    if resp.status_code == 200:
        data = resp.json()
        assert isinstance(data, str), "Response should be a string"
    else:
        # For 422 status, expect error response
        data = resp.json()
        assert "error" in data, "Expected error in response" 