"""
Auto-generated by 'QA-Tools'
The test suite for the vswitch service's /managers/native/connections endpoint.

This suite validates the /managers/native/connections endpoint, which is expected
to return a JSON list of native connections. In the current test environment,
this list is empty.
"""

import pytest

# =====================================================================================================================
# Constants
# =====================================================================================================================

ENDPOINT = "/managers/native/connections"
RESPONSE_SCHEMA = list  # The response must be a list (possibly empty)

# =====================================================================================================================
# Fixtures
# =====================================================================================================================

@pytest.fixture(scope="module")
def response(api_client):
    return api_client.get(ENDPOINT)

@pytest.fixture(scope="module")
def response_data(response):
    assert response.status_code == 200, f"Expected 200 OK, got {response.status_code}"
    data = response.json()
    assert isinstance(data, list), "Response should be a list"
    return data

# =====================================================================================================================
# Test Cases
# =====================================================================================================================

def test_status_code_200(response, attach_curl_on_fail):
    with attach_curl_on_fail(ENDPOINT, method="GET"):
        assert response.status_code == 200

def test_response_schema(response_data, attach_curl_on_fail):
    with attach_curl_on_fail(ENDPOINT, method="GET"):
        assert isinstance(response_data, list)

PARAMS = [
    ("empty", ""),
    ("long", "a" * 500),
    ("special", "!@#$%^&*()_+-=[]{}|;':,./<>?"),
    ("unicode", "你好, Здравствуйте"),
    ("sql_injection", "' OR 1=1; --"),
    ("xss", "<script>alert('XSS')</script>"),
    ("path_traversal", "../../../etc/passwd"),
    ("numeric_str", "12345"),
    ("bool_str_true", "true"),
    ("bool_str_false", "false"),
    ("null_str", "null"),
    ("none_val", None),
    ("list[]", "a"),
    ("dict[key]", "value"),
    ("int", 100),
    ("float", 99.99),
    ("negative", -1),
    ("zero", 0),
    ("large_int", 999999999999999999),
    ("version_string", "v1.2.3-beta"),
    ("email", "test@example.com"),
    ("uuid", "123e4567-e89b-12d3-a456-426614174000"),
    ("date_str", "2025-06-27"),
    ("mac_addr", "00:1B:44:11:3A:B7"),
    ("hostname", "my-test-server.local"),
    ("semver", "2.1.0-alpha.1"),
    ("url", "https://example.com/api/v2/test"),
    ("html_encoded", "a%20b%26c"),
    ("empty_json", "{}"),
    ("id", 123),
    ("verbose", True),
    ("output", "json"),
    ("random1", "foo"),
    ("random2", "bar"),
    ("random3", "baz"),
]

@pytest.mark.parametrize("param, value", PARAMS)
def test_ignores_params(api_client, param, value, attach_curl_on_fail):
    params = {param: value} if value is not None else {param: ""}
    
    with attach_curl_on_fail(ENDPOINT, method="GET"):
        resp = api_client.get(ENDPOINT, params=params)
        assert resp.status_code == 200, f"Expected 200 OK, got {resp.status_code}"
        data = resp.json()
        assert isinstance(data, list), "Response should be a list"
        # Не сравниваем данные, так как API может возвращать динамические значения
        # (например, ID соединений могут меняться между запросами)

@pytest.mark.parametrize("value", [
    "all", "not_an_object", "123", "true", '{"key": "value", "invalid',
])
def test_handles_invalid_filter(api_client, value, attach_curl_on_fail):
    params = {"filter": value}
    
    with attach_curl_on_fail(ENDPOINT, method="GET"):
        resp = api_client.get(ENDPOINT, params=params)
        assert resp.status_code in (400, 422) 