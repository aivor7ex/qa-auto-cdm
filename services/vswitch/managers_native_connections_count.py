"""
Auto-generated by 'QA-Tools'
The test suite for the vswitch service's /managers/native/connections/count endpoint.

This suite validates the /managers/native/connections/count endpoint, which is
expected to return either an integer or a JSON object with 'index' and 'res' fields
representing the count of native connections.
"""

import pytest

# =====================================================================================================================
# Constants
# =====================================================================================================================

ENDPOINT = "/managers/native/connections/count"
RESPONSE_SCHEMA = {"index": int, "res": int}

# =====================================================================================================================
# Fixtures
# =====================================================================================================================

# Фикстуры удалены, так как логика проверок перенесена в тесты

# =====================================================================================================================
# Test Cases
# =====================================================================================================================

def test_status_code_200(api_client, attach_curl_on_fail):
    with attach_curl_on_fail(ENDPOINT, method="GET"):
        resp = api_client.get(ENDPOINT)
        assert resp.status_code == 200

def test_response_schema(api_client, attach_curl_on_fail):
    with attach_curl_on_fail(ENDPOINT, method="GET"):
        resp = api_client.get(ENDPOINT)
        assert resp.status_code == 200, f"Expected 200 OK, got {resp.status_code}"
        data = resp.json()
        
        # API может возвращать как число, так и объект
        if isinstance(data, dict):
            # Проверяем структуру объекта
            assert "index" in data, "Response should contain 'index' field"
            assert "res" in data, "Response should contain 'res' field"
            assert isinstance(data["index"], int), "Field 'index' should be an integer"
            assert isinstance(data["res"], int), "Field 'res' should be an integer"
            assert data["res"] >= 0, "Field 'res' should be non-negative"
        elif isinstance(data, int):
            # Проверяем, что число неотрицательное
            assert data >= 0, "Count should be non-negative"
        else:
            pytest.fail(f"Response should be either an integer or object with 'index' and 'res' fields, got {type(data)}")

PARAMS = [
    ("empty", ""),
    ("long", "a" * 500),
    ("special", "!@#$%^&*()_+-=[]{}|;':,./<>?"),
    ("unicode", "你好, Здравствуйте"),
    ("sql_injection", "' OR 1=1; --"),
    ("xss", "<script>alert('XSS')</script>"),
    ("path_traversal", "../../../etc/passwd"),
    ("numeric_str", "12345"),
    ("bool_str_true", "true"),
    ("bool_str_false", "false"),
    ("null_str", "null"),
    ("none_val", None),
    ("list[]", "a"),
    ("dict[key]", "value"),
    ("int", 100),
    ("float", 99.99),
    ("negative", -1),
    ("zero", 0),
    ("large_int", 999999999999999999),
    ("version_string", "v1.2.3-beta"),
    ("email", "test@example.com"),
    ("uuid", "123e4567-e89b-12d3-a456-426614174000"),
    ("date_str", "2025-06-27"),
    ("mac_addr", "00:1B:44:11:3A:B7"),
    ("hostname", "my-test-server.local"),
    ("semver", "2.1.0-alpha.1"),
    ("url", "https://example.com/api/v2/test"),
    ("html_encoded", "a%20b%26c"),
    ("empty_json", "{}"),
    ("filter", "all"),
    ("id", 123),
    ("verbose", True),
    ("output", "json"),
    ("random1", "foo"),
    ("random2", "bar"),
    ("random3", "baz"),
]

@pytest.mark.parametrize("param, value", PARAMS)
def test_ignores_params(api_client, attach_curl_on_fail, param, value):
    params = {param: value} if value is not None else {param: ""}
    
    with attach_curl_on_fail(ENDPOINT, method="GET"):
        # Get base response for comparison
        base_resp = api_client.get(ENDPOINT)
        assert base_resp.status_code == 200, f"Expected 200 OK for base response, got {base_resp.status_code}"
        base_data = base_resp.json()
        
        # Test with parameters
        resp = api_client.get(ENDPOINT, params=params)
        # Accept both 200 and 400 status codes for this endpoint
        assert resp.status_code in (200, 400), f"Expected 200 or 400, got {resp.status_code}"
        
        if resp.status_code == 200:
            data = resp.json()
            # API может возвращать как число, так и объект
            if isinstance(data, dict):
                assert "index" in data, "Response should contain 'index' field"
                assert "res" in data, "Response should contain 'res' field"
                assert isinstance(data["index"], int), "Field 'index' should be an integer"
                assert isinstance(data["res"], int), "Field 'res' should be an integer"
            elif isinstance(data, int):
                assert data >= 0, "Count should be non-negative"
            else:
                pytest.fail(f"Response should be either an integer or object with 'index' and 'res' fields, got {type(data)}")
        else:
            # For 400 status, expect error response
            data = resp.json()
            assert "error" in data, "Expected error in response" 