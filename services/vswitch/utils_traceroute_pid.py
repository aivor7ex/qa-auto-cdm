"""
Auto-generated by 'QA-Tools'
The test suite for the vswitch service's /utils/traceroute/pid endpoint.

This suite validates the /utils/traceroute/pid endpoint. In the current test environment,
it's expected that the 'traceroute' process is not running, so the API should return a
404 Not Found error with a specific message.
"""

import pytest
import json

# =====================================================================================================================
# Constants
# =====================================================================================================================

ENDPOINT = "/utils/traceroute/pid"
RESPONSE_SCHEMA = {
    "error": {
        "statusCode": int,
        "name": str,
        "message": str,
        "status": int,
        "stack": str,
    }
}

# =====================================================================================================================
# Fixtures
# =====================================================================================================================

@pytest.fixture(scope="module")
def response(api_client):
    return api_client.get(ENDPOINT)

@pytest.fixture(scope="module")
def response_data(response):
    assert response.status_code == 404, f"Expected 404 Not Found, got {response.status_code}"
    data = response.json()
    assert isinstance(data, dict)
    assert "error" in data
    error = data["error"]
    assert isinstance(error, dict)
    for key, typ in RESPONSE_SCHEMA["error"].items():
        assert key in error
        assert isinstance(error[key], typ)
    return data

# =====================================================================================================================
# Test Cases
# =====================================================================================================================

def test_status_code_404(response):
    assert response.status_code == 404

def test_response_schema(response_data):
    assert isinstance(response_data, dict)
    assert "error" in response_data
    error = response_data["error"]
    for key, typ in RESPONSE_SCHEMA["error"].items():
        assert key in error
        assert isinstance(error[key], typ)

PARAMS = [
    ("empty", ""),
    ("long", "a" * 500),
    ("special", "!@#$%^&*()_+-=[]{}|;':,./<>?"),
    ("unicode", "你好, Здравствуйте"),
    ("sql_injection", "' OR 1=1; --"),
    ("xss", "<script>alert('XSS')</script>"),
    ("path_traversal", "../../../etc/passwd"),
    ("numeric_str", "12345"),
    ("bool_str_true", "true"),
    ("bool_str_false", "false"),
    ("null_str", "null"),
    ("none_val", None),
    ("list[]", "a"),
    ("dict[key]", "value"),
    ("int", 100),
    ("float", 99.99),
    ("negative", -1),
    ("zero", 0),
    ("large_int", 999999999999999999),
    ("version_string", "v1.2.3-beta"),
    ("email", "test@example.com"),
    ("uuid", "123e4567-e89b-12d3-a456-426614174000"),
    ("date_str", "2025-06-27"),
    ("mac_addr", "00:1B:44:11:3A:B7"),
    ("hostname", "my-test-server.local"),
    ("semver", "2.1.0-alpha.1"),
    ("url", "https://example.com/api/v2/test"),
    ("html_encoded", "a%20b%26c"),
    ("empty_json", "{}"),
    ("id", 123),
    ("verbose", True),
    ("output", "json"),
    ("random1", "foo"),
    ("random2", "bar"),
    ("random3", "baz"),
]

def _format_curl_command(api_client, endpoint, params=None, headers=None):
    base_url = getattr(api_client, "base_url", getattr(api_client, 'base_url', 'http://127.0.0.1'))
    full_url = f"{base_url.rstrip('/')}/{endpoint.lstrip('/')}"
    if params:
        param_str = "&".join([f"{k}={v}" for k, v in params.items() if v is not None])
        if param_str:
            full_url += f"?{param_str}"
    headers = headers or getattr(api_client, 'headers', {})
    headers_str = " \\\n  ".join([f"-H '{k}: {v}'" for k, v in headers.items()])
    curl_command = f"curl -X GET '{full_url}'"
    if headers_str:
        curl_command += f" \\\n  {headers_str}"
    return curl_command

@pytest.mark.parametrize("param, value", PARAMS)
def test_ignores_params(api_client, response_data, param, value):
    params = {param: value} if value is not None else {param: ""}
    try:
        resp = api_client.get(ENDPOINT, params=params)
        # This endpoint should consistently return 404 as the traceroute process is not running
        assert resp.status_code == 404, f"Expected 404 Not Found, got {resp.status_code}"
        data = resp.json()
        assert isinstance(data, dict), "Response should be a dict"
        assert "error" in data, "Expected error in response"
        # Don't compare with response_data as error messages may vary slightly
    except Exception as e:
        curl_command = _format_curl_command(api_client, ENDPOINT, params)
        error_message = (
            f"\nТест с параметрами {params} упал.\n"
            f"Ошибка: {e}\n\n"
            "================= Failed Test Request (cURL) ================\n"
            f"{curl_command}\n"
            "============================================================="
        )
        pytest.fail(error_message, pytrace=False) 